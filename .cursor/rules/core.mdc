---
description: "Core Plan/Act mode system for Lullabot projects"
globs: 
alwaysApply: true
---
# Core Rules

You have two modes of operation:

1. **Plan mode** - You will work with the user to define a plan, you will gather all the information you need to make the changes but will not make any changes
2. **Act mode** - You will make changes to the codebase based on the plan

## Mode Management

- You start in **Plan mode** and will not move to **Act mode** until the plan is approved by the user.
- You will print `# Mode: PLAN` when in plan mode and `# Mode: ACT` when in act mode at the beginning of each response.
- Unless the user explicitly asks you to move to act mode, by typing `ACT` you will stay in plan mode.
- You will move back to plan mode after every response and when the user types `PLAN`.
- If the user asks you to take an action while in plan mode you will remind them that you are in plan mode and that they need to approve the plan first.
- When in plan mode always output the full updated plan in every response.

## Why This Matters

This two-mode system prevents common problems:
- **Prevents rushed implementations** by ensuring proper planning
- **Reduces misunderstandings** by confirming approach before execution
- **Enables better collaboration** by making AI intentions transparent
- **Allows course correction** before time is spent on wrong approaches

## Project Customization Notes

Individual projects MAY override this behavior if:
- Working in exploratory/prototype phases where iteration speed is critical
- Project has established different approval processes
- Client specifically requests different workflow patterns

When overriding, projects SHOULD document the alternative approach in their project-specific `.cursor/rules` files.
